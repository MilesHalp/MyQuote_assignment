<!-- Miles Halpine 10607950 -->
<!-- Edits made are in line with ones made in Workshop 10's app-views-recipes-_form.html.erb.txt -->
<!-- This view file acts as the interface for users creating a new quote -->

<!-- Displays any errors related to either the quotes or its nested QuoteCategory -->
<% if quote.errors.any? %>
  <div class="alert alert-danger"> <!-- Bootstrap alert component -->
    <ul>
      <% @quote.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<!-- Initiates the rendering of @quotes's form from QuotesController. Using the same prefixes as in Workshop 10 -->
<!-- Prefixes ensure form is submitting to the quotes_path and that the data sent is in the regular HTTP form -->
<!-- Each form field and container uses Bootstrap styling -->

<!-- HTML form helper changes depending on whether a new quote is being made or an existing one is being updated -->
<%= form_with(model: @quote, url: @quote.new_record? ? quotes_path : quote_path(@quote), method: @quote.new_record? ? :post : :patch, local: true) do |form| %>
  <!-- Hidden field for the user's ID -->
  <%= form.hidden_field :user_id, value: current_user.id %>

  <!-- Form fields associated with the quotes table -->
  <!-- Form field for quote text -->
  <div class="form-group" style="padding-bottom: 10px;">
    <%= form.text_area :quote_text, placeholder: 'Quote text', class: 'form-control' %>
  </div>

  <!-- Form field for quote publication year -->
  <div class="form-group" style="padding-bottom: 10px;">
    <%= form.text_field :pub_year, placeholder: 'Publication year', class: 'form-control' %>
  </div>

  <!-- Form field for user comment on the quote -->
  <div class="form-group" style="padding-bottom: 10px;">
    <%= form.text_area :user_comment, placeholder: 'Your comment', class: 'form-control' %>
  </div>

  <!-- Form field to set quote as public or private -->
  <div class="form-check" style="padding-bottom: 10px;">
  <%= form.label :is_public do %>
    Public
    <%= form.check_box :is_public, class: "form-check-input" %>
    <% end %>
  </div>

  <!-- Drop down list to choose a Philosopher for the quote -->
  <div class="form-group" style="padding-bottom: 10px;">
  <%= form.select :philosopher_id, Philosopher.all.collect { |phil| ["#{phil.fname} #{phil.lname}".strip, phil.id] }, { include_blank: 'Anonymous' }, class: "form-control" %>
  </div>

  <!-- Container for the quote's categories -->
  <div id="categories-container">
    <!-- Loops through each of the quote's categories -->
    <% @quote.quote_categories.each do |quote_category| %>
      <!-- Initial instance of one category field row -->
      <%= form.fields_for :quote_categories, quote_category do |qc| %>
        <div class="category-field row mb-2">
          <div class="col-auto">
            <!-- Drop down list of the categories -->
            <%= qc.label :category_id, "Category", class: "form-label d-incline-block me-2" %>
            <%= qc.select :category_id, Category.all.collect { |cat| [cat.cat_name, cat.id] }, { include_blank: true }, class: "form-label d-incline-block" %>
          </div>
          <div class="col-auto align-self-end">
            <!-- Link that when clicked, removes deletes the category row associated to it -->
            <%= link_to '[-] Remove this category', '#', class: 'remove-category', style: "color: red; text-decoration: none;" %>
          </div>
        </div>
      <% end %>
    <% end %>
  </div>


  <!-- Form submit button -->
  <div class ="mt-3">
    <!-- Submit button text changes depending on whether a new quote is being made or an existing one is being updated -->
    <%= form.submit @quote.new_record? ? 'Create Quote' : 'Update Quote', class: 'btn btn-primary btn-lg' %>
  </div>
<% end %>

<script>
<!-- Forces the document to load before proceeding -->
document.addEventListener('DOMContentLoaded', function() {
  <!-- Add an event listener that detects when the user removes a category row -->
  document.addEventListener('click', function(e) {
    <!-- If the remove-category style style class is clicked... -->
    if (e.target && e.target.classList.contains('remove-category')) {
      <!-- Prevent default link behaviour -->
      e.preventDefault();
      <!-- Execute the remove action -->
      const categoryFields = document.querySelectorAll('.category-field');
      <!-- Only remove while more than one category row exists -->
      if (categoryFields.length > 1) {
        e.target.closest('.category-field').remove();
      }
    }
  });
});
</script>